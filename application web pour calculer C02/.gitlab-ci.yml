image: node:20-alpine

stages:
  - build
  - test
  - deploy

variables:
  SSH_HOST: "192.168.75.60"  # IP de la VM
  SSH_USER: "gitlabci"
  SSH_KEY: "$CI_SSH_KEY"
  SONAR_HOST_URL: "$SONAR_HOST_URL"
  SONAR_LOGIN: "$SONAR_LOGIN"
  MYSQL_ROOT_PASSWORD : "$MYSQL_ROOT_PASSWORD"

before_script:
  - apk add --no-cache openssh-client
  - chmod 400 $SSH_KEY


# üåç BUILD FRONTEND
build-frontend:
  stage: build
  script:
    - echo "Building frontend..."
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/dist/
  only:
    refs:
      - main
    changes:
      - frontend/**
      - frontend/**/*


test-sonar-frontend:
  stage: test
  image: 
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  allow_failure: true
  script:
    - echo "Running frontend tests..."
#    - npm test ########pas de test pour le moment
    - echo "Sending results to SonarQube..."
    - sonar-scanner -Dsonar.host.url="$SONAR_HOST_URL" -Dsonar.login="$SONAR_LOGIN" -X
  only:
    refs:
      - main
    changes:
      - frontend/**
      - frontend/**/*
  needs:
    - build-frontend


# üöÄ DEPLOY FRONTEND
deploy-frontend:
  stage: deploy
  script:
    - echo "Deploying frontend..."
    - scp -o StrictHostKeyChecking=no -i $SSH_KEY -r frontend/dist/* $SSH_USER@$SSH_HOST:/opt/app/frontend/dist
  only:
    refs:
      - main
    changes:
      - frontend/**
      - frontend/**/*
  needs:
    - build-frontend
    - test-sonar-frontend
  dependencies:
    - build-frontend 






# üîß BUILD BACKEND
build-backend:
  stage: build
  script:
    - echo "Building backend..."
    - cd back
    - npm install
  only:
    refs:
      - main
    changes:
      - back/**

test-sonar-backend:
  stage: test
  image: 
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  allow_failure: true
  script:
    - echo "Sending results to SonarQube..."
    - sonar-scanner -Dsonar.host.url="$SONAR_HOST_URL" -Dsonar.login="$SONAR_LOGIN" -X
  only:
    refs:
      - main
    changes:
      - back/**
  needs:
    - build-backend



# üöÄ DEPLOY BACKEND
deploy-backend:
  stage: deploy
  script:
    - echo "Deploying backend..."
    - scp -o StrictHostKeyChecking=no -i $SSH_KEY -r back/* $SSH_USER@$SSH_HOST:/opt/app/backend/
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $SSH_USER@$SSH_HOST << 'EOF'
        cd /opt/app/backend || exit 1
        npm install
        export PATH=$HOME/.npm-global/bin:$PATH
        pm2 restart trajet-api || pm2 start ecosystem.config.js
        pm2 save
      EOF
  only:
    refs:
      - main
    changes:
      - back/**
  needs:
    - test-sonar-backend

# üì¶ MAINTENANCE DE LA BASE DE DONN√âES -> pas fou pour le moment -> voir si qq connait
deploy-database:
  stage: deploy
  script:
    - echo "Deploying database..."
    - scp -o StrictHostKeyChecking=no -i $SSH_KEY database/schema.sql $SSH_USER@$SSH_HOST:/opt/app/database/
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $SSH_USER@$SSH_HOST "mysql -u ci_user -p$MYSQL_ROOT_PASSWORD < /opt/app/database/schema.sql"
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $SSH_USER@$SSH_HOST << 'EOF'
        cd /opt/app/backend || exit 1
        echo "Restarting the application..."
        export PATH=$HOME/.npm-global/bin:$PATH
        pm2 restart trajet-api || pm2 start ecosystem.config.js
      EOF
  only:
    refs:
      - main
    changes:
      - database/**




# test code branche front, back ou test
test-dev:
  stage: test
  image: 
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  allow_failure: true
  script:
    - echo "Running tests on branch $CI_COMMIT_BRANCH"
#    - npm test ########pas de test pour le moment
    - echo "Sending results to SonarQube..."
    - sonar-scanner -Dsonar.host.url="$SONAR_HOST_URL" -Dsonar.login="$SONAR_LOGIN" -X
  rules:
  - if: '$CI_COMMIT_BRANCH == "initFront"'
  - if: '$CI_COMMIT_BRANCH == "back"'
  - if: '$CI_COMMIT_BRANCH == "testApi"'